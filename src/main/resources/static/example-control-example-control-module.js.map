{"version":3,"sources":["./src/app/_base/extentions/validator-extension.ts","./src/app/_base/services/message.service.ts","./src/app/layout/thiet-lap/example-control/example-control-dialog/example-control-dialog.component.ts","./src/app/layout/thiet-lap/example-control/example-control-dialog/example-control-dialog.component.html","./src/app/layout/thiet-lap/example-control/example-control-dialog/example-control-dialog.module.ts","./src/app/layout/thiet-lap/example-control/example-control.component.ts","./src/app/layout/thiet-lap/example-control/example-control.component.html","./src/app/layout/thiet-lap/example-control/example-control.module.ts","./src/app/layout/thiet-lap/example-control/example-control.routing.ts"],"names":[],"mappings":"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","file":"example-control-example-control-module.js","sourcesContent":["import { InjectionToken, ɵisObservable as isObservable, ɵisPromise as isPromise } from '@angular/core';\r\nimport { Observable, forkJoin, from, Observer } from 'rxjs';\r\nimport { map, distinctUntilChanged } from 'rxjs/operators';\r\nimport {\r\n  Validator, ValidatorFn, AbstractControl, ValidationErrors,\r\n  Validators, AsyncValidatorFn, FormControl, FormGroup\r\n} from '@angular/forms';\r\n\r\nfunction isEmptyInputValue(value: any): boolean {\r\n  // we don't check for string here so it also works with arrays\r\n  return value == null || value.length === 0;\r\n}\r\n\r\n/**\r\n * @description\r\n * An `InjectionToken` for registering additional synchronous validators used with `AbstractControl`s.\r\n *\r\n * @see `NG_ASYNC_VALIDATORS`\r\n *\r\n * @usageNotes\r\n *\r\n * ### Providing a custom validator\r\n *\r\n * The following example registers a custom validator directive. Adding the validator to the\r\n * existing collection of validators requires the `multi: true` option.\r\n *\r\n * ```typescript\r\n * @Directive({\r\n *   selector: '[customValidator]',\r\n *   providers: [{provide: NG_VALIDATORS, useExisting: CustomValidatorDirective, multi: true}]\r\n * })\r\n * class CustomValidatorDirective implements Validator {\r\n *   validate(control: AbstractControl): ValidationErrors | null {\r\n *     return { 'custom': true };\r\n *   }\r\n * }\r\n * ```\r\n *\r\n * @publicApi\r\n */\r\n// tslint:disable-next-line: ban-types\r\nexport const NG_VALIDATORS = new InjectionToken<Array<Validator | Function>>('NgValidators');\r\n\r\n/**\r\n * @description\r\n * An `InjectionToken` for registering additional asynchronous validators used with `AbstractControl`s.\r\n *\r\n * @see `NG_VALIDATORS`\r\n *\r\n * @publicApi\r\n */\r\nexport const NG_ASYNC_VALIDATORS =\r\n  // tslint:disable-next-line: ban-types\r\n  new InjectionToken<Array<Validator | Function>>('NgAsyncValidators');\r\n\r\n/**\r\n * A regular expression that matches valid e-mail addresses.\r\n *\r\n * At a high level, this regexp matches e-mail addresses of the format `local-part@tld`, where:\r\n * - `local-part` consists of one or more of the allowed characters (alphanumeric and some\r\n *   punctuation symbols).\r\n * - `local-part` cannot begin or end with a period (`.`).\r\n * - `local-part` cannot be longer than 64 characters.\r\n * - `tld` consists of one or more `labels` separated by periods (`.`). For example `localhost` or\r\n *   `foo.com`.\r\n * - A `label` consists of one or more of the allowed characters (alphanumeric, dashes (`-`) and\r\n *   periods (`.`)).\r\n * - A `label` cannot begin or end with a dash (`-`) or a period (`.`).\r\n * - A `label` cannot be longer than 63 characters.\r\n * - The whole address cannot be longer than 254 characters.\r\n *\r\n * ## Implementation background\r\n *\r\n * This regexp was ported over from AngularJS (see there for git history):\r\n * https://github.com/angular/angular.js/blob/c133ef836/src/ng/directive/input.js#L27\r\n * It is based on the\r\n * [WHATWG version](https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address) with\r\n * some enhancements to incorporate more RFC rules (such as rules related to domain names and the\r\n * lengths of different parts of the address). The main differences from the WHATWG version are:\r\n *   - Disallow `local-part` to begin or end with a period (`.`).\r\n *   - Disallow `local-part` length to exceed 64 characters.\r\n *   - Disallow total address length to exceed 254 characters.\r\n *\r\n * See [this commit](https://github.com/angular/angular.js/commit/f3f5cf72e) for more details.\r\n */\r\nconst EMAIL_REGEXP =\r\n  // tslint:disable-next-line: max-line-length\r\n  /^(?=.{1,254}$)(?=.{1,64}@)[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+)*@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;\r\nconst PHONE_REGEXP = /^(01|03|09|07|05|06)+([0-9]{8})\\b$/;\r\nconst SPACE_REGEXP = /^\\s+(?![^.])/;\r\nconst SPECIAL_REGEXP = /[!@#$%^&*()-+={}\\[\\]\\/|<>/\\\\?*]/;\r\nconst s = /\\s{2,}/g;\r\n\r\n/**\r\n * @description\r\n * Provides a set of built-in validators that can be used by form controls.\r\n *\r\n * A validator is a function that processes a `FormControl` or collection of\r\n * controls and returns an error map or null. A null map means that validation has passed.\r\n *\r\n * @see [Form Validation](/guide/form-validation)\r\n *\r\n * @publicApi\r\n */\r\n\r\nexport class ValidatorExtension {\r\n\r\n  /**\r\n   * @description\r\n   * Validator that requires the control's value to be greater than or equal to the provided number.\r\n   * The validator exists only as a function and not as a directive.\r\n   *\r\n   * @usageNotes\r\n   *\r\n   * ### Validate against a minimum of 3\r\n   *\r\n   * ```typescript\r\n   * const control = new FormControl(2, Validators.min(3));\r\n   *\r\n   * console.log(control.errors); // {min: {min: 3, actual: 2}}\r\n   * ```\r\n   *\r\n   * @returns A validator function that returns an error map with the\r\n   * `min` property if the validation check fails, otherwise `null`.\r\n   *\r\n   * @see `updateValueAndValidity()`\r\n   *\r\n   */\r\n  // static min(min: number): ValidatorFn {\r\n  //   return (control: AbstractControl): ValidationErrors | null => {\r\n  //     if (isEmptyInputValue(control.value) || isEmptyInputValue(min)) {\r\n  //       return null;  // don't validate empty values to allow optional controls\r\n  //     }\r\n  //     const value = parseFloat(control.value);\r\n  //     // Controls with NaN values after parsing should be treated as not having a\r\n  //     // minimum, per the HTML forms spec: https://www.w3.org/TR/html5/forms.html#attr-input-min\r\n  //     return !isNaN(value) && value < min ? { min: { min, actual: control.value } } : null;\r\n  //   };\r\n  // }\r\n  static min(min: number, errorMessage?: string): any {\r\n    return (control: AbstractControl): ValidationErrors | null => {\r\n      if (isEmptyInputValue(control.value) || isEmptyInputValue(min)) {\r\n        return null;  // don't validate empty values to allow optional controls\r\n      }\r\n      const value = parseFloat(control.value);\r\n      // Controls with NaN values after parsing should be treated as not having a\r\n      // minimum, per the HTML forms spec: https://www.w3.org/TR/html5/forms.html#attr-input-min\r\n      return !isNaN(value) && value < min ? {\r\n        error: errorMessage || `Giá trị tối thiểu là ${min}`,\r\n        min: { min, actual: control.value }\r\n      } : null;\r\n    };\r\n  }\r\n\r\n  static minDate(min: Date, errorMessage?: string): any {\r\n    return (control: AbstractControl): ValidationErrors | null => {\r\n      if (isEmptyInputValue(control.value) || isEmptyInputValue(min)) {\r\n        return null;  // don't validate empty values to allow optional controls\r\n      }\r\n      const value = control.value as Date;\r\n      // Controls with NaN values after parsing should be treated as not having a\r\n      // minimum, per the HTML forms spec: https://www.w3.org/TR/html5/forms.html#attr-input-min\r\n      return value != null && value !== undefined && value < min ? {\r\n        error: errorMessage || `Giá trị ngày tối thiểu là ${min}`,\r\n        min: { min, actual: control.value }\r\n      } : null;\r\n    };\r\n  }\r\n\r\n  static maxDate(max: Date, errorMessage?: string): any {\r\n    return (control: AbstractControl): ValidationErrors | null => {\r\n      if (isEmptyInputValue(control.value) || isEmptyInputValue(max)) {\r\n        return null;  // don't validate empty values to allow optional controls\r\n      }\r\n      const value = control.value as Date;\r\n      // Controls with NaN values after parsing should be treated as not having a\r\n      // minimum, per the HTML forms spec: https://www.w3.org/TR/html5/forms.html#attr-input-min\r\n      return value != null && value !== undefined && value > max ? {\r\n        error: errorMessage || `Giá trị ngày tối đa là ${max}`,\r\n        min: { max, actual: control.value }\r\n      } : null;\r\n    };\r\n  }\r\n\r\n  /**\r\n   * @description\r\n   * Validator that requires the control's value to be less than or equal to the provided number.\r\n   * The validator exists only as a function and not as a directive.\r\n   *\r\n   * @usageNotes\r\n   *\r\n   * ### Validate against a maximum of 15\r\n   *\r\n   * ```typescript\r\n   * const control = new FormControl(16, Validators.max(15));\r\n   *\r\n   * console.log(control.errors); // {max: {max: 15, actual: 16}}\r\n   * ```\r\n   *\r\n   * @returns A validator function that returns an error map with the\r\n   * `max` property if the validation check fails, otherwise `null`.\r\n   *\r\n   * @see `updateValueAndValidity()`\r\n   *\r\n   */\r\n  // static max(max: number): ValidatorFn {\r\n  //   return (control: AbstractControl): ValidationErrors | null => {\r\n  //     if (isEmptyInputValue(control.value) || isEmptyInputValue(max)) {\r\n  //       return null;  // don't validate empty values to allow optional controls\r\n  //     }\r\n  //     const value = parseFloat(control.value);\r\n  //     // Controls with NaN values after parsing should be treated as not having a\r\n  //     // maximum, per the HTML forms spec: https://www.w3.org/TR/html5/forms.html#attr-input-max\r\n  //     return !isNaN(value) && value > max ? { max: { max, actual: control.value } } : null;\r\n  //   };\r\n  // }\r\n  static max(max: number, errorMessage?: string): any {\r\n    return (control: AbstractControl): ValidationErrors | null => {\r\n      if (isEmptyInputValue(control.value) || isEmptyInputValue(max)) {\r\n        return null;  // don't validate empty values to allow optional controls\r\n      }\r\n      const value = parseFloat(control.value);\r\n      // Controls with NaN values after parsing should be treated as not having a\r\n      // maximum, per the HTML forms spec: https://www.w3.org/TR/html5/forms.html#attr-input-max\r\n      return !isNaN(value) && value > max ? {\r\n        error: errorMessage || `Giá trị tối đa là ${max}`,\r\n        max: { max, actual: control.value }\r\n      } : null;\r\n    };\r\n  }\r\n\r\n  /**\r\n   * @description\r\n   * Validator that requires the control have a non-empty value.\r\n   *\r\n   * @usageNotes\r\n   *\r\n   * ### Validate that the field is non-empty\r\n   *\r\n   * ```typescript\r\n   * const control = new FormControl('', Validators.required);\r\n   *\r\n   * console.log(control.errors); // {required: true}\r\n   * ```\r\n   *\r\n   * @returns An error map with the `required` property\r\n   * if the validation check fails, otherwise `null`.\r\n   *\r\n   * @see `updateValueAndValidity()`\r\n   *\r\n   */\r\n  // static required(control: AbstractControl): ValidationErrors | null {\r\n  //   return isEmptyInputValue(control.value) ? { required: true } : null;\r\n  // }\r\n  static required(errorMessage?: string): any {\r\n    return (control: AbstractControl): ValidationErrors | null => {\r\n      return isEmptyInputValue(control.value) ? { error: errorMessage || 'Không được để trống', required: true } : null;\r\n    };\r\n  }\r\n\r\n  static notWhiteSpace(errorMessage?: string): any {\r\n    return (control: AbstractControl): ValidationErrors | null => {\r\n      return (control.value as string || '').trim() === ''\r\n        ? { error: errorMessage || 'Khoảng trắng là không hợp lệ', required: true }\r\n        : null;\r\n    };\r\n  }\r\n\r\n\r\n  /**\r\n   * @description\r\n   * Validator that requires the control's value be true. This validator is commonly\r\n   * used for required checkboxes.\r\n   *\r\n   * @usageNotes\r\n   *\r\n   * ### Validate that the field value is true\r\n   *\r\n   * ```typescript\r\n   * const control = new FormControl('', Validators.requiredTrue);\r\n   *\r\n   * console.log(control.errors); // {required: true}\r\n   * ```\r\n   *\r\n   * @returns An error map that contains the `required` property\r\n   * set to `true` if the validation check fails, otherwise `null`.\r\n   *\r\n   * @see `updateValueAndValidity()`\r\n   *\r\n   */\r\n  // static requiredTrue(control: AbstractControl): ValidationErrors | null {\r\n  //   return control.value === true ? null : { required: true };\r\n  // }\r\n  static requiredTrue(errorMessage?: string): any {\r\n    return (control: AbstractControl): ValidationErrors | null => {\r\n      return control.value === true ? null : { error: errorMessage || 'Không được để trống', required: true };\r\n    };\r\n  }\r\n\r\n  /**\r\n   * @description\r\n   * Validator that requires the control's value pass an email validation test.\r\n   *\r\n   * Tests the value using a [regular expression](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions)\r\n   * pattern suitable for common usecases. The pattern is based on the definition of a valid email\r\n   * address in the [WHATWG HTML specification](https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address)\r\n   * with some enhancements to incorporate more RFC rules (such as rules related to domain names and\r\n   * the lengths of different parts of the address).\r\n   *\r\n   * The differences from the WHATWG version include:\r\n   * - Disallow `local-part` (the part before the `@` symbol) to begin or end with a period (`.`).\r\n   * - Disallow `local-part` to be longer than 64 characters.\r\n   * - Disallow the whole address to be longer than 254 characters.\r\n   *\r\n   * If this pattern does not satisfy your business needs, you can use `Validators.pattern()` to\r\n   * validate the value against a different pattern.\r\n   *\r\n   * @usageNotes\r\n   *\r\n   * ### Validate that the field matches a valid email pattern\r\n   *\r\n   * ```typescript\r\n   * const control = new FormControl('bad@', Validators.email);\r\n   *\r\n   * console.log(control.errors); // {email: true}\r\n   * ```\r\n   *\r\n   * @returns An error map with the `email` property\r\n   * if the validation check fails, otherwise `null`.\r\n   *\r\n   * @see `updateValueAndValidity()`\r\n   *\r\n   */\r\n  // static email(control: AbstractControl): ValidationErrors | null {\r\n  //   if (isEmptyInputValue(control.value)) {\r\n  //     return null;  // don't validate empty values to allow optional controls\r\n  //   }\r\n  //   return EMAIL_REGEXP.test(control.value) ? null : { email: true };\r\n  // }\r\n  static email(errorMessage?: string): any {\r\n    return (control: AbstractControl): ValidationErrors | null => {\r\n      if (isEmptyInputValue(control.value)) {\r\n        return null;  // don't validate empty values to allow optional controls\r\n      }\r\n      return EMAIL_REGEXP.test(control.value) ? null : { error: errorMessage || 'Không đúng định dạng email', email: true };\r\n    };\r\n  }\r\n\r\n  static phoneNumber(errorMessage?: string): any {\r\n    return (control: AbstractControl): ValidationErrors | null => {\r\n      if (isEmptyInputValue(control.value)) {\r\n        return null;  // don't validate empty values to allow optional controls\r\n      }\r\n      return PHONE_REGEXP.test(control.value) ? null : { error: errorMessage || 'Không đúng định dạng số điện thoại', phoneNumber: true };\r\n    };\r\n  }\r\n\r\n  /**\r\n   * @description\r\n   * Validator that requires the length of the control's value to be greater than or equal\r\n   * to the provided minimum length. This validator is also provided by default if you use the\r\n   * the HTML5 `minlength` attribute.\r\n   *\r\n   * @usageNotes\r\n   *\r\n   * ### Validate that the field has a minimum of 3 characters\r\n   *\r\n   * ```typescript\r\n   * const control = new FormControl('ng', Validators.minLength(3));\r\n   *\r\n   * console.log(control.errors); // {minlength: {requiredLength: 3, actualLength: 2}}\r\n   * ```\r\n   *\r\n   * ```html\r\n   * <input minlength=\"5\">\r\n   * ```\r\n   *\r\n   * @returns A validator function that returns an error map with the\r\n   * `minlength` if the validation check fails, otherwise `null`.\r\n   *\r\n   * @see `updateValueAndValidity()`\r\n   *\r\n   */\r\n  // static minLength(minLength: number): ValidatorFn {\r\n  //   return (control: AbstractControl): ValidationErrors | null => {\r\n  //     if (isEmptyInputValue(control.value)) {\r\n  //       return null;  // don't validate empty values to allow optional controls\r\n  //     }\r\n  //     const length: number = control.value ? control.value.length : 0;\r\n  //     return length < minLength ?\r\n  //       { minlength: { requiredLength: minLength, actualLength: length } } :\r\n  //       null;\r\n  //   };\r\n  // }\r\n  static minLength(minLength: number, errorMessage?: string): any {\r\n    return (control: AbstractControl): ValidationErrors | null => {\r\n      if (isEmptyInputValue(control.value)) {\r\n        return null;  // don't validate empty values to allow optional controls\r\n      }\r\n      const length: number = control.value ? control.value.length : 0;\r\n      return length < minLength ?\r\n        {\r\n          error: errorMessage || `Số ký tự tối thiểu là ${minLength}`,\r\n          minlength: { requiredLength: minLength, actualLength: length }\r\n        } :\r\n        null;\r\n    };\r\n  }\r\n\r\n  /**\r\n   * @description\r\n   * Validator that requires the length of the control's value to be less than or equal\r\n   * to the provided maximum length. This validator is also provided by default if you use the\r\n   * the HTML5 `maxlength` attribute.\r\n   *\r\n   * @usageNotes\r\n   *\r\n   * ### Validate that the field has maximum of 5 characters\r\n   *\r\n   * ```typescript\r\n   * const control = new FormControl('Angular', Validators.maxLength(5));\r\n   *\r\n   * console.log(control.errors); // {maxlength: {requiredLength: 5, actualLength: 7}}\r\n   * ```\r\n   *\r\n   * ```html\r\n   * <input maxlength=\"5\">\r\n   * ```\r\n   *\r\n   * @returns A validator function that returns an error map with the\r\n   * `maxlength` property if the validation check fails, otherwise `null`.\r\n   *\r\n   * @see `updateValueAndValidity()`\r\n   *\r\n   */\r\n  // static maxLength(maxLength: number): ValidatorFn {\r\n  //   return (control: AbstractControl): ValidationErrors | null => {\r\n  //     const length: number = control.value ? control.value.length : 0;\r\n  //     return length > maxLength ?\r\n  //       { maxlength: { requiredLength: maxLength, actualLength: length } } :\r\n  //       null;\r\n  //   };\r\n  // }\r\n  static maxLength(maxLength: number, errorMessage?: string): any {\r\n    return (control: AbstractControl): ValidationErrors | null => {\r\n      if (isEmptyInputValue(control.value)) {\r\n        return null;  // don't validate empty values to allow optional controls\r\n      }\r\n      const length: number = control.value ? control.value.length : 0;\r\n      return length > maxLength ?\r\n        {\r\n          error: errorMessage || `Số ký tự tối đa là ${maxLength}`,\r\n          maxlength: { requiredLength: maxLength, actualLength: length }\r\n        } :\r\n        null;\r\n    };\r\n  }\r\n\r\n  /**\r\n   * @description\r\n   * Validator that requires the control's value to match a regex pattern. This validator is also\r\n   * provided by default if you use the HTML5 `pattern` attribute.\r\n   *\r\n   * @usageNotes\r\n   *\r\n   * ### Validate that the field only contains letters or spaces\r\n   *\r\n   * ```typescript\r\n   * const control = new FormControl('1', Validators.pattern('[a-zA-Z ]*'));\r\n   *\r\n   * console.log(control.errors); // {pattern: {requiredPattern: '^[a-zA-Z ]*$', actualValue: '1'}}\r\n   * ```\r\n   *\r\n   * ```html\r\n   * <input pattern=\"[a-zA-Z ]*\">\r\n   * ```\r\n   *\r\n   * @param pattern A regular expression to be used as is to test the values, or a string.\r\n   * If a string is passed, the `^` character is prepended and the `$` character is\r\n   * appended to the provided string (if not already present), and the resulting regular\r\n   * expression is used to test the values.\r\n   *\r\n   * @returns A validator function that returns an error map with the\r\n   * `pattern` property if the validation check fails, otherwise `null`.\r\n   *\r\n   * @see `updateValueAndValidity()`\r\n   *\r\n   */\r\n  // static pattern(pattern: string | RegExp): ValidatorFn {\r\n  //   if (!pattern) { return Validators.nullValidator; }\r\n  //   let regex: RegExp;\r\n  //   let regexStr: string;\r\n  //   if (typeof pattern === 'string') {\r\n  //     regexStr = '';\r\n\r\n  //     if (pattern.charAt(0) !== '^') { regexStr += '^'; }\r\n\r\n  //     regexStr += pattern;\r\n\r\n  //     if (pattern.charAt(pattern.length - 1) !== '$') { regexStr += '$'; }\r\n\r\n  //     regex = new RegExp(regexStr);\r\n  //   } else {\r\n  //     regexStr = pattern.toString();\r\n  //     regex = pattern;\r\n  //   }\r\n  //   return (control: AbstractControl): ValidationErrors | null => {\r\n  //     if (isEmptyInputValue(control.value)) {\r\n  //       return null;  // don't validate empty values to allow optional controls\r\n  //     }\r\n  //     const value: string = control.value;\r\n  //     return regex.test(value) ? null :\r\n  //       { pattern: { requiredPattern: regexStr, actualValue: value } };\r\n  //   };\r\n  // }\r\n  static pattern(pattern: string | RegExp, errorMessage?: string): ValidatorFn {\r\n    if (!pattern) { return Validators.nullValidator; }\r\n    let regex: RegExp;\r\n    let regexStr: string;\r\n    if (typeof pattern === 'string') {\r\n      regexStr = '';\r\n\r\n      if (pattern.charAt(0) !== '^') { regexStr += '^'; }\r\n\r\n      regexStr += pattern;\r\n\r\n      if (pattern.charAt(pattern.length - 1) !== '$') { regexStr += '$'; }\r\n\r\n      regex = new RegExp(regexStr);\r\n    } else {\r\n      regexStr = pattern.toString();\r\n      regex = pattern;\r\n    }\r\n    return (control: AbstractControl): ValidationErrors | null => {\r\n      if (isEmptyInputValue(control.value)) {\r\n        return null;  // don't validate empty values to allow optional controls\r\n      }\r\n      const value: string = control.value;\r\n      return regex.test(value) ? null :\r\n        {\r\n          error: errorMessage || 'Không đúng định dạng',\r\n          pattern: { requiredPattern: regexStr, actualValue: value }\r\n        };\r\n    };\r\n  }\r\n\r\n  /**\r\n   * @description\r\n   * Validator that performs no operation.\r\n   *\r\n   * @see `updateValueAndValidity()`\r\n   *\r\n   */\r\n  static nullValidator(control: AbstractControl): ValidationErrors | null { return null; }\r\n\r\n  /**\r\n   * @description\r\n   * Compose multiple validators into a single function that returns the union\r\n   * of the individual error maps for the provided control.\r\n   *\r\n   * @returns A validator function that returns an error map with the\r\n   * merged error maps of the validators if the validation check fails, otherwise `null`.\r\n   *\r\n   * @see `updateValueAndValidity()`\r\n   *\r\n   */\r\n  static compose(validators: null): null;\r\n  static compose(validators: (ValidatorFn | null | undefined)[]): ValidatorFn | null;\r\n  static compose(validators: (ValidatorFn | null | undefined)[] | null): ValidatorFn | null {\r\n    if (!validators) { return null; }\r\n    const presentValidators: ValidatorFn[] = validators.filter(isPresent) as any;\r\n    if (presentValidators.length === 0) { return null; }\r\n\r\n    return (control: AbstractControl) => {\r\n      return _mergeErrors(_executeValidators(control, presentValidators));\r\n    };\r\n  }\r\n\r\n  /**\r\n   * @description\r\n   * Compose multiple async validators into a single function that returns the union\r\n   * of the individual error objects for the provided control.\r\n   *\r\n   * @returns A validator function that returns an error map with the\r\n   * merged error objects of the async validators if the validation check fails, otherwise `null`.\r\n   *\r\n   * @see `updateValueAndValidity()`\r\n   *\r\n   */\r\n  static composeAsync(validators: (AsyncValidatorFn | null)[]): AsyncValidatorFn | null {\r\n    if (!validators) { return null; }\r\n    const presentValidators: AsyncValidatorFn[] = validators.filter(isPresent) as any;\r\n    if (presentValidators.length === 0) { return null; }\r\n\r\n    return (control: AbstractControl) => {\r\n      const observables = _executeAsyncValidators(control, presentValidators).map(toObservable);\r\n      return forkJoin(observables).pipe(map(_mergeErrors));\r\n    };\r\n  }\r\n\r\n  // tslint:disable-next-line: max-line-length\r\n  static compareValidator(nameControlTarget: string, errorMessage: string): any {\r\n    return (control: AbstractControl) => {\r\n      if (isEmptyInputValue(control.value)) {\r\n        return { error: 'Không được để trống' };\r\n      }\r\n      const controlTarget = control.parent.get(nameControlTarget);\r\n      if (controlTarget.value !== null && control.value !== controlTarget.value) {\r\n        return { error: errorMessage };\r\n      }\r\n      return null;\r\n    };\r\n  }\r\n\r\n  static eqFn = (ctrl: FormControl, ctrlTarget: AbstractControl) => ctrl.value === ctrlTarget.value;\r\n  static notEqFn = (ctrl: FormControl, ctrlTarget: AbstractControl) => ctrl.value !== ctrlTarget.value;\r\n  static gtFn = (ctrl: FormControl, ctrlTarget: AbstractControl) => ctrl.value > ctrlTarget.value;\r\n  static gteFn = (ctrl: FormControl, ctrlTarget: AbstractControl) => ctrl.value >= ctrlTarget.value;\r\n  static ltFn = (ctrl: FormControl, ctrlTarget: AbstractControl) => ctrl.value < ctrlTarget.value;\r\n  static lteFn = (ctrl: FormControl, ctrlTarget: AbstractControl) => ctrl.value <= ctrlTarget.value;\r\n  static gtDateFn = (ctrl: FormControl, ctrlTarget: AbstractControl) => new Date(ctrl.value)\r\n    > new Date(ctrlTarget.value)\r\n  static gteDateFn = (ctrl: FormControl, ctrlTarget: AbstractControl) => new Date(ctrl.value)\r\n    >= new Date(ctrlTarget.value)\r\n  static ltDateFn = (ctrl: FormControl, ctrlTarget: AbstractControl) => new Date(ctrl.value)\r\n    < new Date(ctrlTarget.value)\r\n  static lteDateFn = (ctrl: FormControl, ctrlTarget: AbstractControl) => new Date(ctrl.value)\r\n    <= new Date(ctrlTarget.value)\r\n\r\n  static existAsyncValidator(checkExist: (value: string) => Observable<boolean>, errorMessage?: string): any {\r\n    return (control: FormControl) =>\r\n      new Observable((observer: Observer<ValidationErrors | null>) => {\r\n        setTimeout(async () => {\r\n          if (await checkExist(control.value).toPromise()) {\r\n            observer.next({ error: errorMessage || 'Đã tồn tại', duplicated: true });\r\n          } else {\r\n            observer.next(null);\r\n          }\r\n          observer.complete();\r\n        }, 1000);\r\n      });\r\n  }\r\n\r\n  static space(errorMessage?: string): any {\r\n    return (control: AbstractControl) => {\r\n      if (control.value !== null && control.value !== '' && (SPACE_REGEXP.test(control.value))) {\r\n        return { error: errorMessage || 'Không đúng định dạng ! ', space: true };\r\n      }\r\n      return null;\r\n    };\r\n  }\r\n\r\n  static specialChar(errorMessage?: string): any {\r\n    return (control: AbstractControl) => {\r\n      if (control.value !== null && control.value !== '' && (SPECIAL_REGEXP.test(control.value))) {\r\n        return { error: errorMessage || 'Không hợp lệ !', special: true };\r\n      }\r\n      return null;\r\n    };\r\n  }\r\n\r\n  static containsSpace(errorMessage?: string): any {\r\n    return (control: AbstractControl) => {\r\n      if (control.value !== null && control.value !== '' && (/\\s/.test(control.value))) {\r\n        return { error: errorMessage || 'Không được chứa khoảng trắng ! ', space: true };\r\n      }\r\n      return null;\r\n    };\r\n  }\r\n\r\n  static countNumber(min: number, max: number, errorMessage?: string): any {\r\n    return (control: AbstractControl) => {\r\n      const value: string = control.value;\r\n      const countNumber = value.replace(/[^0-9]/g, '').length;\r\n      if (countNumber < min || countNumber > max) {\r\n        return { error: errorMessage || `phải chứa từ ${min} đến ${max} số`, number: true };\r\n      }\r\n      return null;\r\n    };\r\n  }\r\n\r\n  static countChar(min: number, max: number, errorMessage?: string): any {\r\n    // đi kèm với validate ký tự đặc biệt\r\n    return (control: AbstractControl) => {\r\n      const value: string = control.value;\r\n      const countNumber = value.replace(/[0-9]/g, '').length;\r\n      if (countNumber < min || countNumber > max) {\r\n        return { error: errorMessage || `phải chứa từ ${min} đến ${max} chữ cái`, char: true };\r\n      }\r\n      return null;\r\n    };\r\n  }\r\n\r\n  static checkFormatString(errorMessage?: string): any {\r\n    // đi kèm với validate ký tự đặc biệt\r\n    return (control: AbstractControl) => {\r\n      // const value: string = control.value;\r\n      // const s15: string = value.substr(0, 5);\r\n      // const s6: string = value.substr(5, 1);\r\n      // const s7: string = value.substr(6, 1);\r\n      //\r\n      // const countNumber = value.replace(/[0-9]/g, '').length;\r\n      // if (countNumber < min || countNumber > max) {\r\n      //   return { error: errorMessage || `phải chứa từ ${min} đến ${max} chữ cái`, char: true };\r\n      // }\r\n      return null;\r\n    };\r\n  }\r\n\r\n\r\n  // static compareValidator(controlTarget: AbstractControl, message: string) {\r\n  //   return (control: FormControl) => {\r\n  //     if (!control.value) {\r\n  //       return { required: true };\r\n  //     } else if (control.value !== controlTarget.value) {\r\n  //       return { compare: message, error: true };\r\n  //     }\r\n  //     return null;\r\n  //   };\r\n  // }\r\n\r\n  // static setCompareValidator(myForm: FormGroup, control: string, controlTarget: string, message: string) {\r\n  //   myForm.get(control).setValidators(this.compareValidator(myForm.controls[controlTarget], message));\r\n  // }\r\n}\r\n\r\nfunction isPresent(o: any): boolean {\r\n  return o != null;\r\n}\r\n\r\nexport function toObservable(r: any): Observable<any> {\r\n  const obs = isPromise(r) ? from(r) : r;\r\n  if (!(isObservable(obs))) {\r\n    throw new Error(`Expected validator to return Promise or Observable.`);\r\n  }\r\n  return obs;\r\n}\r\n\r\nfunction _executeValidators(control: AbstractControl, validators: ValidatorFn[]): any[] {\r\n  return validators.map(v => v(control));\r\n}\r\n\r\nfunction _executeAsyncValidators(control: AbstractControl, validators: AsyncValidatorFn[]): any[] {\r\n  return validators.map(v => v(control));\r\n}\r\n\r\nfunction _mergeErrors(arrayOfErrors: ValidationErrors[]): ValidationErrors | null {\r\n  const res: { [key: string]: any } =\r\n    // tslint:disable-next-line: no-shadowed-variable\r\n    arrayOfErrors.reduce((res: ValidationErrors | null, errors: ValidationErrors | null) => {\r\n      // tslint:disable-next-line: no-non-null-assertion\r\n      return errors != null ? { ...res!, ...errors } : res!;\r\n    }, {});\r\n  return Object.keys(res).length === 0 ? null : res;\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { NzNotificationService } from 'ng-zorro-antd/notification';\r\nimport { NzMessageService } from 'ng-zorro-antd';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class MessageService {\r\n  constructor(\r\n    private notification: NzNotificationService,\r\n    private message: NzMessageService\r\n  ) { }\r\n\r\n  public showMessageSuccess(title: string = '', message: string = ''): void {\r\n    this.notification\r\n      .blank(\r\n        title,\r\n        message,\r\n        { nzDuration: 3000 }\r\n      )\r\n      .onClick.subscribe(() => {\r\n      console.log('notification clicked!');\r\n    });\r\n  }\r\n\r\n  public notiMessageSuccess(content: string): void {\r\n    this.message.success(content);\r\n  }\r\n\r\n  public notiMessageError(content: string): void {\r\n    if (content) {\r\n      this.message.error(content);\r\n    }\r\n  }\r\n\r\n  public notiMessageWarning(content: string): void {\r\n    this.message.warning(content);\r\n  }\r\n}\r\n","import { Component, OnInit, Output, EventEmitter } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\n\n@Component({\n  selector: 'app-example-control-dialog',\n  templateUrl: './example-control-dialog.component.html',\n  styleUrls: ['./example-control-dialog.component.scss']\n})\nexport class ExampleControlDialogComponent implements OnInit {\n\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() onClose = new EventEmitter<any>();\n\n  public myForm: FormGroup;\n\n  constructor(\n    private fb: FormBuilder\n  ) { }\n\n  ngOnInit(): void {\n    this.myForm = this.fb.group({\n      valueAddedServiceCode: ['', [\n      ]],\n      valueAddedServiceName: ['', [\n      ]],\n      description: [''],\n    });\n  }\n\n  closeDialog(): void {\n    this.onClose.emit();\n  }\n}\n","<button aria-label=\"Close\" class=\"ant-modal-close ng-star-inserted\" (click)=\"closeDialog()\">\n  <span class=\"ant-modal-close-x\">\n    <i nz-icon nzType=\"close\" nzTheme=\"outline\" class=\"anticon ant-modal-close-icon anticon-close\"></i>\n  </span>\n</button>\n\n<nz-spin [nzSpinning]=\"false\">\n  <form nz-form [formGroup]=\"myForm\" novalidate>\n    <ng-template #controlErrorTpl let-control>\n      <app-render-errors [control]=\"control\"></app-render-errors>\n    </ng-template>\n    <div class=\"row\">\n      <div class=\"col-md-6\">\n        <nz-form-item>\n          <nz-form-label nzRequired>Mã dịch vụ cộng thêm</nz-form-label>\n          <nz-form-control [nzErrorTip]=\"controlErrorTpl\">\n            <input-text placeholder=\"Nhập mã dịch vụ cộng thêm\" formControlName=\"valueAddedServiceCode\"></input-text>\n          </nz-form-control>\n        </nz-form-item>\n      </div>\n      <div class=\"col-md-6\">\n        <nz-form-item>\n          <nz-form-label nzRequired>Tên dịch vụ cộng thêm</nz-form-label>\n          <nz-form-control [nzErrorTip]=\"controlErrorTpl\">\n            <input-text placeholder=\"Nhập tên dịch vụ cộng thêm\" formControlName=\"valueAddedServiceName\"></input-text>\n          </nz-form-control>\n        </nz-form-item>\n      </div>\n    </div>\n    <div class=\"text-center mt-2\">\n<!--      <ng-container *ngIf=\"mode !== 'view'\">-->\n<!--        <button nz-button [nzLoading]=\"isSubmit\" class=\"btn btn-primary mr-2 w-2\" (click)=\"save()\">-->\n<!--          Ghi-->\n<!--        </button>-->\n<!--      </ng-container>-->\n<!--      <ng-container *ngIf=\"!(mode === 'view' || mode === 'edit')\">-->\n<!--        <button nz-button [nzLoading]=\"isSubmit\" class=\"btn btn-primary mr-2\" (click)=\"save(true)\">-->\n<!--          Ghi và thêm mới-->\n<!--        </button>-->\n<!--      </ng-container>-->\n      <button class=\"btn btn-light\" type=\"button\" (click)=\"closeDialog()\">Đóng</button>\n    </div>\n  </form>\n</nz-spin>\n\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ExampleControlDialogComponent } from './example-control-dialog.component';\nimport { NgZorroAntdModule } from 'ng-zorro-antd';\nimport { FormBuilder, FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { NzFormModule } from 'ng-zorro-antd/form';\nimport { NzDividerModule } from 'ng-zorro-antd/divider';\nimport { ShareControlsModule } from '../../../../_base/controls/share-controls.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ShareControlsModule,\n  ],\n  exports: [\n    ExampleControlDialogComponent\n  ],\n  declarations: [ExampleControlDialogComponent],\n})\nexport class ExampleControlDialogModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { MessageService } from '../../../_base/services/message.service';\nimport { DialogMode, DialogService, DialogSize } from '../../../_base/services/dialog.service';\nimport { UserService } from '../../../_share/services/user.service';\nimport { NzModalRef } from 'ng-zorro-antd/modal';\nimport { ExampleControlDialogComponent } from './example-control-dialog/example-control-dialog.component';\nimport { ValidatorExtension } from '../../../_base/extentions/validator-extension';\n\n@Component({\n  selector: 'app-example-control',\n  templateUrl: './example-control.component.html',\n  styleUrls: ['./example-control.component.scss']\n})\nexport class ExampleControlComponent implements OnInit {\n\n  public myForm: FormGroup;\n  myFormValueText: string;\n\n  constructor(\n    private fb: FormBuilder,\n    private messageService: MessageService,\n    private dialogService: DialogService,\n    private userService: UserService\n  ) { }\n\n  ngOnInit(): void {\n    this.myForm = this.fb.group({\n      fullName: ['full name', [ValidatorExtension.required()]],\n      note: ['note', [ValidatorExtension.required()]],\n      number: [null, [ValidatorExtension.required()]],\n    });\n  }\n\n  async submitForm(): Promise<void> {\n    this.myForm.markAllAsDirty();\n    if (this.myForm.invalid) {\n      return;\n    }\n    this.myFormValueText = JSON.stringify(this.myForm.getRawValue());\n  }\n\n  async onDisable(): Promise<void> {\n    this.myForm.disable();\n  }\n\n  async onEnable(): Promise<void> {\n    this.myForm.enable();\n  }\n\n  async onBindError(): Promise<void> {\n    console.log('onBindError');\n    this.myForm.get('number').markAsDirty();\n    this.myForm.get('number').setErrors({error: 'Loi ne na' });\n    // this.myForm.get('number').updateValueAndValidity();\n    // this.myForm.markAllAsDirty();\n    // this.myForm.bindError({\n    //   text: ['loi ne']\n    // });\n    // this.myForm.markAsDirty();\n    // this.myForm.updateValueAndValidity();\n\n    console.log(this.myForm);\n  }\n\n  async onOpenDialog(): Promise<void> {\n    const dialog = this.dialogService.openDialog(option => {\n      option.title = 'example crud';\n      option.size = DialogSize.medium;\n      option.component = ExampleControlDialogComponent;\n      option.inputs = {\n        mode: DialogMode.edit\n      };\n    }, (eventName) => {\n      if (eventName === 'onClose') {\n        this.dialogService.closeDialogById(dialog.id);\n        // this.getData(this.paging);\n      }\n    });\n  }\n}\n\n","<nz-divider nzOrientation=\"left\" nzText=\"Thông tin chung\"></nz-divider>\n<form nz-form nz-form [formGroup]=\"myForm\" novalidate (ngSubmit)=\"submitForm()\">\n  <ng-template #controlErrorTpl let-control>\n    <app-render-errors [control]=\"control\"></app-render-errors>\n  </ng-template>\n<!--  <input-text placeholder=\"Họ và tên\" formControlName=\"fullName\"></input-text>-->\n  <div class=\"row\">\n    <div class=\"col-md-6\">\n      <nz-form-item>\n        <nz-form-label nzRequired>Mã dịch vụ cộng thêm</nz-form-label>\n        <nz-form-control [nzErrorTip]=\"controlErrorTpl\">\n<!--          <input formControlName=\"text\"/>-->\n          <input-text placeholder=\"Họ và tên\" formControlName=\"fullName\"></input-text>\n        </nz-form-control>\n      </nz-form-item>\n    </div>\n    <div class=\"col-md-6\">\n      <nz-form-item>\n        <nz-form-label nzRequired>note</nz-form-label>\n        <nz-form-control [nzErrorTip]=\"controlErrorTpl\">\n          <input-textarea placeholder=\"Ghi chú\" formControlName=\"note\"></input-textarea>\n        </nz-form-control>\n      </nz-form-item>\n    </div>\n  </div>\n\n  <nz-form-item>\n    <nz-form-label [nzSm]=\"6\" [nzXs]=\"24\" nzRequired nzFor=\"number\">E-mail</nz-form-label>\n<!--    <nz-form-control [nzSm]=\"14\" [nzXs]=\"24\" nzErrorTip=\"The input is not valid E-mail!\">-->\n    <nz-form-control [nzSm]=\"14\" [nzXs]=\"24\" [nzErrorTip]=\"controlErrorTpl\">\n      <input-number formControlName=\"number\"></input-number>\n    </nz-form-control>\n  </nz-form-item>\n  <ng-container>\n    <div>\n      <button nz-button nzType=\"primary\" class=\"mr-2\" type=\"button\" (click)=\"submitForm()\">get value</button>\n    </div>\n    {{ myFormValueText }}\n    <br/>\n    <div>\n      <button nz-button nzType=\"primary\" type=\"button\" (click)=\"onDisable()\">disable all</button>\n    </div>\n    <br/>\n    <div>\n      <button nz-button nzType=\"primary\" type=\"button\" (click)=\"onEnable()\">enable all</button>\n    </div>\n    <br/>\n    <div>\n      <button nz-button nzType=\"primary\" type=\"button\" (click)=\"onOpenDialog()\">Open dialog</button>\n    </div>\n    <br/>\n    <div>\n      <button nz-button nzType=\"primary\" type=\"button\" (click)=\"onBindError()\">bind errors</button>\n    </div>\n  </ng-container>\n</form>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ExampleControlComponent } from './example-control.component';\nimport { ExampleControlRouting } from './example-control.routing';\nimport { ShareControlsModule } from '../../../_base/controls/share-controls.module';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { NzDividerModule } from 'ng-zorro-antd/divider';\nimport { NzFormModule } from 'ng-zorro-antd/form';\nimport { NgZorroAntdModule } from 'ng-zorro-antd';\nimport { ExampleControlDialogModule } from './example-control-dialog/example-control-dialog.module';\nimport { RenderErrorsModule } from '../../../_base/controls/render-errors/render-errors.module';\n\n@NgModule({\n  declarations: [\n    ExampleControlComponent\n  ],\n  imports: [\n    CommonModule,\n    ExampleControlDialogModule,\n    ShareControlsModule,\n    ExampleControlRouting,\n    // FormsModule,\n    // NzDividerModule,\n    // ReactiveFormsModule,\n    // NzFormModule,\n    // NgZorroAntdModule,\n    // ExampleControlDialogModule,\n    // RenderErrorsModule,\n  ]\n})\nexport class ExampleControlModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule, Routes } from '@angular/router';\nimport {ExampleControlComponent} from './example-control.component';\n\nconst routes: Routes = [\n  {path: '', component: ExampleControlComponent}\n];\n\nexport const ExampleControlRouting = RouterModule.forChild(routes);\n"],"sourceRoot":"webpack:///"}